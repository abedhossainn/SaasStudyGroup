service cloud.firestore {
  match /databases/{database}/documents {
    // Helper function to check if user is authenticated
    function isAuthenticated() {
      return request.auth != null;
    }

    // Helper function to check if user is accessing their own document
    function isOwner(userId) {
      return isAuthenticated() && request.auth.uid == userId;
    }

    // Helper function to check if user is a group member
    function isGroupMember(groupId) {
      return isAuthenticated() && 
        exists(/databases/$(database)/documents/groups/$(groupId)/members/$(request.auth.uid));
    }

    // Helper function to check if user is the group creator
    function isGroupCreator(groupId) {
      return isAuthenticated() && 
        request.auth.uid == get(/databases/$(database)/documents/groups/$(groupId)).data.createdBy;
    }

    // ðŸ”¹ Events Collection
    match /events/{eventId} {
      allow read: if isAuthenticated();
      allow create: if isAuthenticated();
      allow update, delete: if isAuthenticated() && 
        resource.data.createdBy == request.auth.uid;
    }

    // ðŸ”¹ Messages Collection
    match /messages/{message} {
      // Allow any authenticated user to read messages
      allow read: if isAuthenticated();

      // Allow creating new messages (sender only, required fields only)
      allow create: if isAuthenticated() &&
        request.resource.data.senderId == request.auth.uid &&
        request.resource.data.text is string &&
        request.resource.data.senderName is string &&
        request.resource.data.timestamp is timestamp;

      // Allow updating messages only to mark them as seen
      allow update: if isAuthenticated() &&
        // Only the recipient can mark as seen
        resource.data.to == request.auth.uid &&
        // Only the `seen` field is changing (optional safety check)
        request.resource.data.seen == true &&
        request.resource.data.text == resource.data.text &&
        request.resource.data.senderId == resource.data.senderId &&
        request.resource.data.senderName == resource.data.senderName &&
        request.resource.data.timestamp == resource.data.timestamp &&
        request.resource.data.to == resource.data.to;
        
      // Allow users to delete their own messages
      allow delete: if isAuthenticated() && 
        resource.data.senderId == request.auth.uid;
    }

    // ðŸ”¹ Users Collection
    match /users/{userId} {
      // Allow read if authenticated
      allow read: if isAuthenticated();
      
      // Allow write if user is the owner
      allow write: if isOwner(userId);
      
      // Allow update if user is the owner
      allow update: if isOwner(userId);
      
      // Allow users to delete their own accounts
      allow delete: if isOwner(userId);
    }
    
    // ðŸ”¹ Groups Collection
    match /groups/{groupId} {
      // Allow read if authenticated
      allow read: if isAuthenticated();
      
      // Allow create if authenticated
      allow create: if isAuthenticated() &&
        request.resource.data.creatorId == request.auth.uid;
      
      // Allow update if user is the creator OR if the user is only updating the members array to join the group
      allow update: if isAuthenticated() && (
        // Group creator can make any updates
        resource.data.creatorId == request.auth.uid ||
        
        // OR other users can only update 'members' field to add themselves to the group
        (
          // Only allow updating the members field and lastActive/updatedAt timestamps
          request.resource.data.diff(resource.data).affectedKeys()
            .hasOnly(['members', 'updatedAt', 'lastActive']) &&
          
          // Ensure members array only adds the current user
          request.resource.data.members.hasOnly(resource.data.members.concat([request.auth.uid]))
        )
      );
      
      // Allow delete if user is the creator
      allow delete: if isAuthenticated() && 
        resource.data.creatorId == request.auth.uid;
      
      // Allow members to update their own status
      match /members/{memberId} {
        allow read: if isAuthenticated();
        allow write: if isAuthenticated() && memberId == request.auth.uid;
      }
      
      // Group Messages Subcollection
      match /messages/{messageId} {
        allow read: if isAuthenticated();
        allow create: if isAuthenticated();
        allow update, delete: if false; // Messages cannot be edited or deleted
      }

      // Group Meetings Subcollection
      match /meetings/{meetingId} {
        allow read: if isAuthenticated();
        allow create: if isAuthenticated();
        allow update, delete: if isAuthenticated() && 
          resource.data.createdBy == request.auth.uid;
      }

      // Group Documents Subcollection
      match /documents/{documentId} {
        allow read: if isAuthenticated();
        allow create: if isAuthenticated();
        allow update, delete: if isAuthenticated();
      }
    }

    // ðŸ”¹ Top-level Meetings Collection
    match /meetings/{meetingId} {
      allow read: if isAuthenticated();
      allow create: if isAuthenticated();
      allow update, delete: if isAuthenticated() && 
        resource.data.createdBy == request.auth.uid;
    }

    // ðŸ”¹ Notifications Collection
    match /notifications/{notificationId} {
      // Allow read if authenticated and notification belongs to user
      allow read: if isAuthenticated() && 
        resource.data.userId == request.auth.uid;
      
      // Allow any authenticated user to create notifications for any user
      // This allows scheduling events to create notifications for group members
      allow create: if isAuthenticated();
      
      // Allow update if authenticated and notification belongs to user
      allow update: if isAuthenticated() &&
        resource.data.userId == request.auth.uid;
        
      // Allow users to delete their own notifications
      allow delete: if isAuthenticated() &&
        resource.data.userId == request.auth.uid;
    }
  }
}